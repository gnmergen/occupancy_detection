knitr::opts_chunk$set(echo = TRUE,
fig.show = "hold",
out.width = "50%")
library(tidyverse)
library(tidymodels)
knitr::opts_chunk$set(echo = TRUE,
fig.show = "hold",
out.width = "50%",
message = F)
library(tidyverse)
library(tidymodels)
occupancy <- read.csv("../data/occupancy_data.csv")
View(occupancy)
occ_split <- initial_split(occupancy)
?initial_split
occupancy
occupancy %>%
count(Occupancy)
occupancy
?as_factor
occupancy %>%
mutate(Occupancy = as_factor(Occupancy))
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(desc(date))
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(date)
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(date)
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = Occupancy))+
geom_bar()
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = Occupancy))+
geom_col()
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = Occupancy))+
geom_bar(position = "dodge")
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = Occupancy))+
geom_point()
occupancy %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
arrange(date) %>%
ggplot(aes(x = date, y = Temperature))+
geom_point()
knitr::opts_chunk$set(echo = TRUE,
message = F,
fig.show = "hold",
out.width = "50%")
library(tidymodels)
library(tidyverse)
library(xgboost)
library(vip)
library(doParallel)
occupancy <- read.csv("../data/occupancy_data.csv") %>%
mutate(Occupancy = as_factor(Occupancy)) %>%
select(-date)
set.seed(123)
occ_split <- initial_split(occupancy)
occ_train <- training(occ_split)
occ_test <- testing(occ_split)
set.seed(200)
occ_folds <- vfold_cv(occ_train, v= 10, strata = Occupancy)
xgb_fit %>%
collect_metrics()
set.seed(123)
occ_split <- initial_split(occupancy)
occ_train <- training(occ_split)
occ_test <- testing(occ_split)
set.seed(200)
occ_folds <- vfold_cv(occ_train, v= 10, strata = Occupancy)
xgb_rec <- recipe(Occupancy ~ Temperature + Humidity + CO2 +
HumidityRatio,  data = occ_train)
xgb_spec <- boost_tree(
trees = 1000,
tree_depth = tune(),
min_n = tune(),
loss_reduction = tune(),
sample_size = tune(),
mtry = tune(),
learn_rate = tune()
) %>%
set_engine('xgboost') %>%
set_mode('classification')
xgb_spec
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), occ_train),
learn_rate(),
size = 30
)
xgb_wflow <- workflow() %>%
add_recipe(xgb_rec) %>%
add_model(xgb_spec)
cl_mergen <- makePSOCKcluster(detectCores())
registerDoParallel(cl_mergen)
set.seed(200)
xgb_fit <- tune_grid(
xgb_wflow,
resamples = occ_folds,
grid = xgb_grid,
control = control_grid(save_pred = TRUE)
)
xgb_fit %>%
collect_metrics()
xgb_fit %>%
show_best(metric = 'roc_auc')
xgb_best <-xgb_fit %>%
select_best(metric = 'roc_auc')
xgb_final <- finalize_workflow(xgb_wflow, xgb_best)
xgb_final <- finalize_workflow(xgb_wflow, xgb_best)
xgb_final %>%
fit(data = occ_train) %>%
augment(new_data = occ_train) %>%
conf_mat(truth = Occupancy, estimate = .pred_class) %>%
autoplot('heatmap') +
scale_fill_gradient(low = 'pink', high = 'royalblue')
xgb_final %>%
fit(data = occ_train) %>%
extract_fit_parsnip() %>%
vip(geom = 'point')+
theme_minimal()
xgb_final
